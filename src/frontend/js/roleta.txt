/*jogo.js
let container = document.querySelector(".container");
let btn = document.getElementById("spin");
let selectedEl = document.getElementById("selected");
let rotating = false;

// Lista de números de 1 a 30
const numbers = Array.from({ length: 30 }, (_, i) => i + 1);

// Rastreamento de números usados
const usedNumbers = new Set();

// Palavras correspondentes aos números (cada número tem três palavras)
const Perguntas = [
  ["Pergunta 1.1", "Pergunta 1.2", "Pergunta 1.3"],
  ["Pergunta 2.1", "Pergunta 2.2", "Pergunta 2.3"],
  ["Pergunta 3.1", "Pergunta 3.2", "Pergunta 3.3"],
  ["Pergunta 4.1", "Pergunta 4.2", "Pergunta 4.3"],
  ["Pergunta 5.1", "Pergunta 5.2", "Pergunta 5.3"],
  ["Pergunta 6.1", "Pergunta 6.2", "Pergunta 6.3"],
  ["Pergunta 7.1", "Pergunta 7.2", "Pergunta 7.3"],
  ["Pergunta 8.1", "Pergunta 8.2", "Pergunta 8.3"],
  ["Pergunta 9.1", "Pergunta 9.2", "Pergunta 9.3"],
  ["Pergunta 10.1", "Pergunta 10.2", "Pergunta 10.3"],
  ["Pergunta 11.1", "Pergunta 11.2", "Pergunta 11.3"],
  ["Pergunta 12.1", "Pergunta 12.2", "Pergunta 12.3"],
  ["Pergunta 13.1", "Pergunta 13.2", "Pergunta 13.3"],
  ["Pergunta 14.1", "Pergunta 14.2", "Pergunta 14.3"],
  ["Pergunta 15.1", "Pergunta 15.2", "Pergunta 15.3"],
  ["Pergunta 16.1", "Pergunta 16.2", "Pergunta 16.3"],
  ["Pergunta 17.1", "Pergunta 17.2", "Pergunta 17.3"],
  ["Pergunta 18.1", "Pergunta 18.2", "Pergunta 18.3"],
  ["Pergunta 19.1", "Pergunta 19.2", "Pergunta 19.3"],
  ["Pergunta 20.1", "Pergunta 20.2", "Pergunta 20.3"],
  ["Pergunta 21.1", "Pergunta 21.2", "Pergunta 21.3"],
  ["Pergunta 22.1", "Pergunta 22.2", "Pergunta 22.3"],
  ["Pergunta 23.1", "Pergunta 23.2", "Pergunta 23.3"],
  ["Pergunta 24.1", "Pergunta 24.2", "Pergunta 24.3"],
  ["Pergunta 25.1", "Pergunta 25.2", "Pergunta 25.3"],
  ["Pergunta 26.1", "Pergunta 26.2", "Pergunta 26.3"],
  ["Pergunta 27.1", "Pergunta 27.2", "Pergunta 27.3"],
  ["Pergunta 28.1", "Pergunta 28.2", "Pergunta 28.3"],
  ["Pergunta 29.1", "Pergunta 29.2", "Pergunta 29.3"],
  ["Pergunta 30.1", "Pergunta 30.2", "Pergunta 30.3"],
];

// Função para obter a cor original com base no número
function getColorForNumber(number) {
  switch (number) {
    case 1:
      return "#3f51b5";
    case 2:
      return "#4e29b4";
    case 3:
      return "#6795d1";
    case 4:
      return "#426ad8";
    case 5:
      return "#009688";
    case 6:
      return "#01f18d";
    case 7:
      return "#27b065";
    case 8:
      return "#0cda50";
    case 9:
      return "rgb(15, 245, 27)";
    case 10:
      return "rgb(7, 194, 122)";
    case 11:
      return "rgb(211, 248, 48)";
    case 12:
      return "rgb(245, 229, 13)";
    case 13:
      return "rgb(204, 207, 16)";
    case 14:
      return "rgb(245, 233, 71)";
    case 15:
      return "rgb(218, 215, 42)";
    case 16:
      return "rgb(248, 124, 7)";
    case 17:
      return "rgb(243, 192, 25)";
    case 18:
      return "rgb(194, 91, 7)";
    case 19:
      return "rgb(241, 111, 4)";
    case 20:
      return "rgb(216, 118, 6)";
    case 21:
      return "rgb(255, 47, 238)";
    case 22:
      return "rgb(139, 13, 112)";
    case 23:
      return "rgb(216, 96, 210)";
    case 24:
      return "rgb(255, 4, 180)";
    case 25:
      return "rgba(236, 13, 199, 0.795)";
    case 26:
      return "rgb(255, 87, 96)";
    case 27:
      return "rgb(255, 47, 64)";
    case 28:
      return "rgb(196, 9, 9)";
    case 29:
      return "rgb(247, 1, 1)";
    case 30:
      return "rgb(119, 11, 25)";
    default:
      return "#ccc";
  }
}

let palavrasUsadas = new Map();

const wsRoleta = new WebSocket("ws://localhost:8080/roleta");
const wsChat = new WebSocket("ws://localhost:8080/roleta-chat");

wsRoleta.addEventListener("open", (event) => {
  console.log("Conectado à roleta em tempo real");
});

wsRoleta.addEventListener("message", (event) => {
  console.log("Mensagem da roleta em tempo real:", event.data);
  // Lógica para lidar com mensagens recebidas da roleta
  // Exemplo: updateRoleta(event.data);
});

wsRoleta.addEventListener("close", (event) => {
  console.log("Conexão com a roleta fechada");
});

wsChat.addEventListener("message", (event) => {
  console.log("Mensagem do chat em tempo real:", event.data);
  // Lógica para lidar com mensagens recebidas do chat
  // Exemplo: processChatMessage(event.data);
});

wsChat.addEventListener("close", (event) => {
  console.log("Conexão com o chat fechada");
});

btn.onclick = function () {
  if (rotating) return;
  rotating = true;

  if (wsRoleta.readyState !== WebSocket.OPEN) {
    console.error("WebSocket da roleta não está aberto.");
    rotating = false;
    return;
  }

  if (numbers.length === 0) {
    selectedEl.innerHTML = "Todos os números foram selecionados!";
    rotating = false;
    return;
  }

  const randomIndex = Math.floor(Math.random() * numbers.length);
  let randomNumber = numbers[randomIndex];

  let angle = 360 - (randomNumber - 1) * (360 / 30);
  let minTurns = 2;
  let extraTurns = Math.floor(Math.random() * 10) + minTurns;
  let totalAngle = 360 * (minTurns + extraTurns) + angle;

  container.style.transition = "transform 5s ease-out";
  container.style.transform = "rotate(" + (totalAngle + 3600) + "deg)";

  setTimeout(() => {
    container.style.transition = "none";
    rotating = false;

    const selectedNumber = randomNumber;
    selectedEl.innerHTML = `Selecionado: ${selectedNumber}`;

    if (!palavrasUsadas.has(selectedNumber)) {
      palavrasUsadas.set(
        selectedNumber,
        shuffleArray(Perguntas[selectedNumber - 1])
      );
    }

    const wordSet = palavrasUsadas.get(selectedNumber);
    const selectedWord = wordSet.pop();

    const wordElement = document.createElement("div");
    wordElement.textContent = selectedWord;
    selectedEl.appendChild(wordElement);

    usedNumbers.add(randomNumber);
    const selectedNumberElement = document.querySelector(`.container .num-${randomNumber}`);
    selectedNumberElement.style.backgroundColor = "#ccc";

    numbers.splice(randomIndex, 1);

    if (wordSet.length === 0) {
      palavrasUsadas.delete(selectedNumber);
    }

    wsRoleta.send(`Número selecionado: ${selectedNumber}`);
  }, 5000);
};

document.getElementById("new-game").onclick = function () {
  palavrasUsadas.clear();

  usedNumbers.forEach((randomNumber) => {
    const selectedNumberElement = document.querySelector(`.container .num-${randomNumber}`);
    selectedNumberElement.style.backgroundColor = getColorForNumber(randomNumber);
  });

  selectedEl.innerHTML = "";

  numbers.length = 0;
  for (let i = 1; i <= 30; i++) {
    numbers.push(i);
  }

  container.style.transition = "none";
  container.style.transform = "rotate(0deg)";

  rotating = false;

  const casa = document.querySelectorAll('.container div[class^="num-"]');
  casa.forEach((element) => {
    element.style.backgroundColor = getColorForNumber(Number(element.className.split('num-')[1]));
  });
};

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}
*/




const TIPO_MENSAGEM = {
  GIRO: "giro",
  TURNO: "turno",
  NUMERO_CAIU: "numeroCaiu",
  PALAVRA_CAIU: "palavraCaiu",
};

let container = document.querySelector(".container");
let btn = document.getElementById("spin");
let selectedEl = document.getElementById("selected");
let rotating = false;

// WebSocket
let websocket;

// Lista de números de 1 a 30
const numbers = Array.from({ length: 30 }, (_, i) => i + 1);

// Rastreamento de números usados
const usedNumbers = new Set();

// Palavras correspondentes aos números (cada número tem três palavras)
const palavras = [
  ["Palavra 1.1", "Palavra 1.2", "Palavra 1.3"],
  ["Palavra 2.1", "Palavra 2.2", "Palavra 2.3"],
  ["Palavra 3.1", "Palavra 3.2", "Palavra 3.3"],
  ["Palavra 4.1", "Palavra 4.2", "Palavra 4.3"],
  ["Palavra 5.1", "Palavra 5.2", "Palavra 5.3"],
  ["Palavra 6.1", "Palavra 6.2", "Palavra 6.3"],
  ["Palavra 7.1", "Palavra 7.2", "Palavra 7.3"],
  ["Palavra 8.1", "Palavra 8.2", "Palavra 8.3"],
  ["Palavra 9.1", "Palavra 9.2", "Palavra 9.3"],
  ["Palavra 10.1", "Palavra 10.2", "Palavra 10.3"],
  ["Palavra 11.1", "Palavra 11.2", "Palavra 11.3"],
  ["Palavra 12.1", "Palavra 12.2", "Palavra 12.3"],
  ["Palavra 13.1", "Palavra 13.2", "Palavra 13.3"],
  ["Palavra 14.1", "Palavra 14.2", "Palavra 14.3"],
  ["Palavra 15.1", "Palavra 15.2", "Palavra 15.3"],
  ["Palavra 16.1", "Palavra 16.2", "Palavra 16.3"],
  ["Palavra 17.1", "Palavra 17.2", "Palavra 17.3"],
  ["Palavra 18.1", "Palavra 18.2", "Palavra 18.3"],
  ["Palavra 19.1", "Palavra 19.2", "Palavra 19.3"],
  ["Palavra 20.1", "Palavra 20.2", "Palavra 20.3"],
  ["Palavra 21.1", "Palavra 21.2", "Palavra 21.3"],
  ["Palavra 22.1", "Palavra 22.2", "Palavra 22.3"],
  ["Palavra 23.1", "Palavra 23.2", "Palavra 23.3"],
  ["Palavra 24.1", "Palavra 24.2", "Palavra 24.3"],
  ["Palavra 25.1", "Palavra 25.2", "Palavra 25.3"],
  ["Palavra 26.1", "Palavra 26.2", "Palavra 26.3"],
  ["Palavra 27.1", "Palavra 27.2", "Palavra 27.3"],
  ["Palavra 28.1", "Palavra 28.2", "Palavra 28.3"],
  ["Palavra 29.1", "Palavra 29.2", "Palavra 29.3"],
  ["Palavra 30.1", "Palavra 30.2", "Palavra 30.3"],
];

// Função para obter a cor original com base no número
function getColorForNumber(number) {
  switch (number) {
    case 1:
      return "#3f51b5";
    case 2:
      return "#4e29b4";
    case 3:
      return "#6795d1";
    case 4:
      return "#426ad8";
    case 5:
      return "#009688";
    case 6:
      return "#01f18d";
    case 7:
      return "#27b065";
    case 8:
      return "#0cda50";
    case 9:
      return "rgb(15, 245, 27)";
    case 10:
      return "rgb(7, 194, 122)";
    case 11:
      return "rgb(211, 248, 48)";
    case 12:
      return "rgb(245, 229, 13)";
    case 13:
      return "rgb(204, 207, 16)";
    case 14:
      return "rgb(245, 233, 71)";
    case 15:
      return "rgb(218, 215, 42)";
    case 16:
      return "rgb(248, 124, 7)";
    case 17:
      return "rgb(243, 192, 25)";
    case 18:
      return "rgb(194, 91, 7)";
    case 19:
      return "rgb(241, 111, 4)";
    case 20:
      return "rgb(216, 118, 6)";
    case 21:
      return "rgb(255, 47, 238)";
    case 22:
      return "rgb(139, 13, 112)";
    case 23:
      return "rgb(216, 96, 210)";
    case 24:
      return "rgb(255, 4, 180)";
    case 25:
      return "rgba(236, 13, 199, 0.795)";
    case 26:
      return "rgb(255, 87, 96)";
    case 27:
      return "rgb(255, 47, 64)";
    case 28:
      return "rgb(196, 9, 9)";
    case 29:
      return "rgb(247, 1, 1)";
    case 30:
      return "rgb(119, 11, 25)";
    default:
      return "#ccc";
  }
}

// Palavras usadas nas partidas anteriores
let palavrasUsadas = new Map();

// Inicializar WebSocket
function initWebSocket() {
  const websocket = new WebSocket("ws://localhost:8080/roleta");

  websocket.onmessage = function (event) {
    const message = JSON.parse(event.data);

    switch (message.type) {
      case TIPO_MENSAGEM.NUMERO_CAIU:
        // Lógica para tratar quando um número caiu
        handleNumeroCaiu(message.numero);
        break;
      case TIPO_MENSAGEM.PALAVRA_CAIU:
        // Lógica para tratar quando uma palavra caiu
        handlePalavraCaiu(message.palavra);
        break;
      // ... (adicionar outros tipos de mensagem conforme necessário)
    }
  };

  websocket.onclose = function () {
    // Reconectar em caso de fechamento da conexão
    setTimeout(initWebSocket, 1000);
  };
}

// Função para processar mensagens do número que caiu
function handleNumeroCaiu(numero) {
  // Faça algo com o número que caiu
  console.log(`Número que caiu: ${numero}`);
}

// Função para processar mensagens da palavra que caiu
function handlePalavraCaiu(palavra) {
  // Faça algo com a palavra que caiu
  console.log(`Palavra que caiu: ${palavra}`);
}

// Iniciar a conexão WebSocket ao carregar a página
initWebSocket();

// Função para embaralhar um array usando o algoritmo de Fisher-Yates
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

btn.onclick = function () {
  if (rotating) return;
  rotating = true;

  const randomIndex = Math.floor(Math.random() * numbers.length);
  let randomNumber = numbers[randomIndex];

  const wordSet = palavrasUsadas.get(randomNumber);
  const selectedWord = wordSet.pop();

  container.style.transition = "transform 5s ease-out";
  container.style.transform = "rotate(" + (3600 - (randomNumber - 1) * (360 / 30)) + "deg)";

  // Enviar mensagem de giro para o servidor WebSocket
  const spinMessage = {
    type: TIPO_MENSAGEM.GIRO,
    numero: randomNumber,
    palavra: selectedWord,
  };

  ws.send(JSON.stringify({ type: TIPO_MENSAGEM.GIRO, data: spinMessage }));

  // ... (restante do código)

  setTimeout(() => {
    container.style.transition = "none";
    rotating = false;

    // Defina o número selecionado após a rotação.
    const selectedNumber = randomNumber;
    selectedEl.innerHTML = `Selecionado: ${selectedNumber}`;

    // Embaralhe as palavras para o número selecionado, se necessário
    if (!palavrasUsadas.has(selectedNumber)) {
      // Embaralhe as palavras para o número atual
      palavrasUsadas.set(
        selectedNumber,
        shuffleArray(palavras[selectedNumber - 1])
      );
    }

    // Retire a próxima palavra do conjunto embaralhado
    const wordSet = palavrasUsadas.get(selectedNumber);
    const selectedWord = wordSet.pop();

    // Exiba a palavra escolhida aleatoriamente abaixo do número selecionado.
    const wordElement = document.createElement("div");
    wordElement.textContent = selectedWord;
    selectedEl.appendChild(wordElement);

    // Registre o número usado e aplique um estilo de fundo cinza.
    usedNumbers.add(randomNumber);
    const selectedNumberElement = document.querySelector(`.container .num-${randomNumber}`);
    selectedNumberElement.style.backgroundColor = "#ccc";

    // Remova o número da lista de números disponíveis
    numbers.splice(randomIndex, 1);

    // Verifique se todas as palavras foram usadas para este número
    if (wordSet.length === 0) {
      palavrasUsadas.delete(selectedNumber);
    }

    // Enviar mensagem ao servidor WebSocket
    const message = {
      type: TIPO_MENSAGEM.NUMERO_CAIU,
      numero: selectedNumber,
    };

    websocket.send(JSON.stringify(message));

    // Enviar mensagem ao servidor WebSocket
    const palavraCaiuMessage = {
      type: TIPO_MENSAGEM.PALAVRA_CAIU,
      palavra: selectedWord,
    };

    websocket.send(JSON.stringify(palavraCaiuMessage));
  }, 5000);
};

// Função para iniciar um novo jogo
document.getElementById("new-game").onclick = function () {
  // Limpe o conjunto de palavras usadas
  palavrasUsadas.clear();

  // Redefina a cor de fundo das casas para as cores originais
  usedNumbers.forEach((randomNumber) => {
    const selectedNumberElement = document.querySelector(`.container .num-${randomNumber}`);
    selectedNumberElement.style.backgroundColor = getColorForNumber(randomNumber);
  });

  // Limpe a div de seleção
  selectedEl.innerHTML = "";

  // Reinicie a lista de números disponíveis
  numbers.length = 0;
  for (let i = 1; i <= 30; i++) {
    numbers.push(i);
  }

  // Redefina a roleta para a posição inicial (casa número 1)
  container.style.transition = "none"; // Desative a transição
  container.style.transform = "rotate(0deg)"; // Defina a rotação de volta para 0 graus

  rotating = false; // Certifique-se de que a rotação esteja desativada ao iniciar um novo jogo

  // Restaure todas as cores originais das casas
  const casa = document.querySelectorAll('.container div[class^="num-"]');
  casa.forEach((element) => {
    element.style.backgroundColor = getColorForNumber(Number(element.className.split('num-')[1]));
  });
};


// Função para processar mensagens da roleta
function handleRoletaMessage(data) {
  const { type, numero, palavra } = data;

  switch (type) {
    case TIPO_MENSAGEM.NUMERO_CAIU:
      // Lógica para tratar quando um número caiu
      console.log(`Número caiu: ${numero}`);
      break;
    case TIPO_MENSAGEM.PALAVRA_CAIU:
      // Lógica para tratar quando uma palavra caiu
      console.log(`Palavra caiu: ${palavra}`);
      break;
    // Adicione outros tipos de mensagem conforme necessário
  }
}


